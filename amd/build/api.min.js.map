{"version":3,"file":"api.min.js","sources":["../src/api.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module api\n *\n * @module     tool_realtime/api\n * @copyright  Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\nlet delegatedplugin = null;\n\n/**\n * Can be used by any plugins to send data to server using the realtime API\n *\n * @param {Object} channel object with attributes component, area, itemid, channeldetails\n * @param {Object} payload\n * @return {Promise}\n */\nexport function sendToServer(channel, payload) {\n    if (!delegatedplugin || !delegatedplugin.sendToServer) {\n       return sendToServerAjax(channel, payload);\n    }\n    return delegatedplugin.sendToServer({\n        contextid: channel.contextid,\n        component: channel.component,\n        area: channel.area,\n        itemid: parseInt(channel.itemid ?? 0),\n        channeldetails: channel.channeldetails,\n    }, payload);\n}\n\n/**\n * Used by realtime plugins to set the currently active implementation.\n *\n * The plugin must contain a method sendToServer(channel, payload) that returns a Promise\n *\n * @param {Object} plugin\n */\nexport function setImplementation(plugin) {\n    delegatedplugin = plugin;\n}\n\n/**\n *\n * @param {Object} channel\n * @param {Object} payload\n */\nexport function sendToServerAjax(channel, payload) {\n    return Ajax.call([{\n        methodname: 'tool_realtime_request',\n        args: {\n            channel: JSON.stringify(channel), payload: JSON.stringify(payload)\n        }\n    }])[0].then((response) => {\n        return response;\n    });\n}\n"],"names":["channel","payload","delegatedplugin","sendToServer","sendToServerAjax","contextid","component","area","itemid","parseInt","channeldetails","plugin","Ajax","call","methodname","args","JSON","stringify","then","response"],"mappings":";;;;;;;4FAkC6BA,QAASC,iCAC7BC,kBAAoBA,gBAAgBC,oBAC/BC,iBAAiBJ,QAASC,gBAE7BC,gBAAgBC,aAAa,CAChCE,UAAWL,QAAQK,UACnBC,UAAWN,QAAQM,UACnBC,KAAMP,QAAQO,KACdC,OAAQC,iCAAST,QAAQQ,kDAAU,GACnCE,eAAgBV,QAAQU,gBACzBT,yFAU2BU,QAC9BT,gBAAkBS,gEA9BlBT,gBAAkB,cAsCNE,iBAAiBJ,QAASC,gBAC/BW,cAAKC,KAAK,CAAC,CACdC,WAAY,wBACZC,KAAM,CACFf,QAASgB,KAAKC,UAAUjB,SAAUC,QAASe,KAAKC,UAAUhB,aAE9D,GAAGiB,MAAMC,UACFA"}