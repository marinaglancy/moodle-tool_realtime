{"version":3,"file":"realtime.min.js","sources":["../src/realtime.js"],"sourcesContent":["/**\n * Real time events using Pusher\n *\n * @module     realtimeplugin_pusher/realtime\n * @copyright  2020 Daniel Conquit, Matthew Gray, Nicholas Parker, Dan Thistlethwaite\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nrequire.config({\n    enforceDefine: false,\n    paths: {\n        \"pusher-7.0\": 'https://js.pusher.com/7.0/pusher'\n    }\n});\n\ndefine(['core/pubsub', 'tool_realtime/events', 'pusher-7.0', 'tool_realtime/api'], function(PubSub, RealTimeEvents, Pusher, api) {\n\n    var params;\n    var channels = [];\n    var pubSub = PubSub;\n    var realTimeEvents = RealTimeEvents;\n    var subToChannel = function(context, component, area, itemid) {\n        var pusher = new Pusher(params.key, {\n            cluster: params.cluster\n        });\n\n        var channelString = context + '-' + component + '-' + area + '-' + itemid;\n\n        var channel = pusher.subscribe(channelString);\n        channel.bind('event', function(data) {\n            var channelObj = channelString.split('-');\n            var payload = JSON.parse(data);\n            var dataToSend = {\"itemid\" : channelObj[3], \"component\" : channelObj[1], \"area\" : channelObj[2], \"payload\" : payload};\n            pubSub.publish(realTimeEvents.EVENT, dataToSend);\n        });\n    };\n\n    var plugin =  {\n        init: function(userId, app_id, key, secret, cluster) {\n            if (params && params.userid) {\n                // Log console dev error.\n            } else {\n                params = {\n                    app_id: app_id,\n                    key: key,\n                    secret: secret,\n                    cluster: cluster\n                };\n            }\n            api.setImplementation(plugin);\n        },\n        subscribe: function(context, component, area, itemid, fromId, fromTimeStamp) {\n            var channeltosubto = {\n                context: context,\n                component: component,\n                area: area,\n                fromid: fromId,\n                fromtimestamp: fromTimeStamp\n            };\n            if(channeltosubto) {\n                channels.push(channeltosubto);\n            }\n            subToChannel(context, component, area, itemid);\n        }\n    };\n    return plugin;\n});\n"],"names":["require","config","enforceDefine","paths","define","PubSub","RealTimeEvents","Pusher","api","params","channels","pubSub","realTimeEvents","plugin","init","userId","app_id","key","secret","cluster","userid","setImplementation","subscribe","context","component","area","itemid","fromId","fromTimeStamp","channeltosubto","fromid","fromtimestamp","push","pusher","channelString","bind","data","channelObj","split","payload","JSON","parse","dataToSend","publish","EVENT","subToChannel"],"mappings":";;;;;;;AAQAA,QAAQC,OAAO,CACXC,eAAe,EACfC,MAAO,cACW,sCAItBC,wCAAO,CAAC,cAAe,uBAAwB,aAAc,sBAAsB,SAASC,OAAQC,eAAgBC,OAAQC,SAEpHC,OACAC,SAAW,GACXC,OAASN,OACTO,eAAiBN,eAiBjBO,OAAU,CACVC,KAAM,SAASC,OAAQC,OAAQC,IAAKC,OAAQC,SACpCV,QAAUA,OAAOW,SAGjBX,OAAS,CACLO,OAAQA,OACRC,IAAKA,IACLC,OAAQA,OACRC,QAASA,UAGjBX,IAAIa,kBAAkBR,SAE1BS,UAAW,SAASC,QAASC,UAAWC,KAAMC,OAAQC,OAAQC,mBACtDC,eAAiB,CACjBN,QAASA,QACTC,UAAWA,UACXC,KAAMA,KACNK,OAAQH,OACRI,cAAeH,eAEhBC,gBACCnB,SAASsB,KAAKH,gBAvCP,SAASN,QAASC,UAAWC,KAAMC,YAC9CO,OAAS,IAAI1B,OAAOE,OAAOQ,IAAK,CAChCE,QAASV,OAAOU,UAGhBe,cAAgBX,QAAU,IAAMC,UAAY,IAAMC,KAAO,IAAMC,OAErDO,OAAOX,UAAUY,eACvBC,KAAK,SAAS,SAASC,UACvBC,WAAaH,cAAcI,MAAM,KACjCC,QAAUC,KAAKC,MAAML,MACrBM,WAAa,QAAYL,WAAW,aAAkBA,WAAW,QAAaA,WAAW,WAAgBE,SAC7G5B,OAAOgC,QAAQ/B,eAAegC,MAAOF,eA6BrCG,CAAatB,QAASC,UAAWC,KAAMC,iBAGxCb"}