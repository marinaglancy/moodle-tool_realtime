{"version":3,"file":"realtime.min.js","sources":["../src/realtime.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Real time events\n *\n * @module     realtimeplugin_phppoll/realtime\n * @copyright  2020 Marina Glancy\n */\n\nimport * as PubSub from 'core/pubsub';\nimport * as RealTimeEvents from 'tool_realtime/events';\n\nvar params;\nvar channels = [];\nvar requestscounter = [];\nvar pollURL;\nvar ajax = new XMLHttpRequest();\n\n/**\n * Make sure we don't send requests too often\n *\n * @returns {Boolean}\n */\nfunction checkRequestCounter() {\n    var curDate = new Date(),\n        curTime = curDate.getTime();\n    requestscounter.push(curTime);\n    requestscounter = requestscounter.slice(-10);\n    // If there were 10 requests in less than 5 seconds, it must be an error. Stop polling.\n    if (requestscounter.length >= 10 && curTime - requestscounter[0] < 5000) {\n        PubSub.publish(RealTimeEvents.CONNECTION_LOST);\n        return false;\n    }\n    return true;\n}\n\n/**\n * Polls for events, schedules the next poll\n */\nfunction poll() {\n    if (!checkRequestCounter()) {\n        // Too many requests, stop polling.\n        return;\n    }\n    ajax.onreadystatechange = function() {\n        if (this.readyState === 4 && this.status === 200) {\n            if (this.status === 200) {\n                let json;\n                try {\n                    json = JSON.parse(this.responseText);\n                } catch {\n                    setTimeout(poll, params.timeout);\n                    return;\n                }\n                if (!json.success || json.success !== 1) {\n                    // Poll.php returned an error or an exception. Stop trying to poll.\n                    PubSub.publish(RealTimeEvents.CONNECTION_LOST);\n                    return;\n                }\n\n                // Process results - trigger all necessary Javascript/jQuery events.\n                var events = json.events;\n                for (var i in events) {\n                    PubSub.publish(RealTimeEvents.EVENT, events[i]);\n                    // Remember the last id.\n                    params.fromid = events[i].id;\n                }\n                // And start polling again.\n                setTimeout(poll, params.timeout);\n            } else {\n                // Must be a server timeout or loss of network - start new process.\n                setTimeout(poll, params.timeout);\n            }\n        }\n    };\n\n    if (channels.length <= 0) {\n        return;\n    }\n    let query = 'userid=' + encodeURIComponent(params.userid) +\n        '&fromid=' + encodeURIComponent(params.fromid) +\n        '&sid=' + encodeURIComponent(params.sid);\n    for (let i = 0; i < channels.length; i++) {\n        query += `&channels[${i}]=` + encodeURIComponent(channels[i].hash);\n        query += `&key[${i}]=` + encodeURIComponent(channels[i].key);\n    }\n\n    ajax.open('POST', pollURL, true);\n    ajax.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    ajax.send(query);\n}\n\n/**\n * Initialise plugin\n *\n * @param {Number} userId\n * @param {String} pollURLParam\n * @param {Number} timeout\n * @param {String} sid\n */\nexport function init(userId, pollURLParam, timeout, sid) {\n    if (params && params.userid) {\n        // Log console dev error.\n    } else {\n        params = {\n            userid: userId,\n            timeout: timeout,\n            sid\n        };\n    }\n    pollURL = pollURLParam;\n}\n\n/**\n * Subscribe to events\n *\n * @param {String} hash\n * @param {String} key\n * @param {Number} fromId\n */\nexport function subscribe(hash, key, fromId) {\n    params.fromid = fromId;\n    channels.push({hash, key});\n    setTimeout(poll, params.timeout);\n}\n"],"names":["params","userId","pollURLParam","timeout","sid","userid","pollURL","hash","key","fromId","fromid","channels","push","setTimeout","poll","requestscounter","ajax","XMLHttpRequest","curTime","Date","getTime","slice","length","PubSub","publish","RealTimeEvents","CONNECTION_LOST","onreadystatechange","this","readyState","status","json","JSON","parse","responseText","success","events","i","EVENT","id","query","encodeURIComponent","open","setRequestHeader","send"],"mappings":"+jCAyBIA,sFAwFiBC,OAAQC,aAAcC,QAASC,KAC5CJ,QAAUA,OAAOK,SAGjBL,OAAS,CACLK,OAAQJ,OACRE,QAASA,QACTC,IAAAA,MAGRE,QAAUJ,0CAUYK,KAAMC,IAAKC,QACjCT,OAAOU,OAASD,OAChBE,SAASC,KAAK,CAACL,KAAAA,KAAMC,IAAAA,MACrBK,WAAWC,KAAMd,OAAOG,4GA5GxBG,QAFAK,SAAW,GACXI,gBAAkB,GAElBC,KAAO,IAAIC,wBAuBNH,UAdDI,SADU,IAAIC,MACIC,UACtBL,gBAAgBH,KAAKM,UACrBH,gBAAkBA,gBAAgBM,OAAO,KAErBC,QAAU,IAAMJ,QAAUH,gBAAgB,GAAK,MAC/DQ,OAAOC,QAAQC,eAAeC,iBACvB,cANPR,WAmBJF,KAAKW,mBAAqB,cACE,IAApBC,KAAKC,YAAoC,MAAhBD,KAAKE,UACV,MAAhBF,KAAKE,OAAgB,KACjBC,SAEAA,KAAOC,KAAKC,MAAML,KAAKM,cACzB,kBACErB,WAAWC,KAAMd,OAAOG,aAGvB4B,KAAKI,SAA4B,IAAjBJ,KAAKI,oBAEtBZ,OAAOC,QAAQC,eAAeC,qBAK9BU,OAASL,KAAKK,WACb,IAAIC,KAAKD,OACVb,OAAOC,QAAQC,eAAea,MAAOF,OAAOC,IAE5CrC,OAAOU,OAAS0B,OAAOC,GAAGE,GAG9B1B,WAAWC,KAAMd,OAAOG,cAGxBU,WAAWC,KAAMd,OAAOG,UAKhCQ,SAASW,QAAU,aAGnBkB,MAAQ,UAAYC,mBAAmBzC,OAAOK,QAC9C,WAAaoC,mBAAmBzC,OAAOU,QACvC,QAAU+B,mBAAmBzC,OAAOI,SACnC,IAAIiC,EAAI,EAAGA,EAAI1B,SAASW,OAAQe,IACjCG,OAAS,oBAAaH,QAAQI,mBAAmB9B,SAAS0B,GAAG9B,MAC7DiC,OAAS,eAAQH,QAAQI,mBAAmB9B,SAAS0B,GAAG7B,KAG5DQ,KAAK0B,KAAK,OAAQpC,SAAS,GAC3BU,KAAK2B,iBAAiB,eAAgB,qCACtC3B,KAAK4B,KAAKJ"}