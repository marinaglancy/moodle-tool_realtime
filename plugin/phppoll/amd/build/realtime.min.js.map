{"version":3,"file":"realtime.min.js","sources":["../src/realtime.js"],"sourcesContent":["/**\n * Real time events\n *\n * @module     realtimeplugin_phppoll/realtime\n * @copyright  2020 Marina Glancy\n */\ndefine(['core/pubsub', 'tool_realtime/events'], function(PubSub, RealTimeEvents) {\n\n    var params;\n    var channels = [];\n    var requestscounter = [];\n    var pollURL;\n    var ajax = new XMLHttpRequest(), json;\n\n    var checkRequestCounter = function() {\n        var curDate = new Date(),\n            curTime = curDate.getTime();\n        requestscounter.push(curTime);\n        requestscounter = requestscounter.slice(-10);\n        // If there were 10 requests in less than 5 seconds, it must be an error. Stop polling.\n        if (requestscounter.length >= 10 && curTime - requestscounter[0] < 5000) {\n            PubSub.publish(RealTimeEvents.CONNECTION_LOST);\n            return false;\n        }\n        return true;\n    };\n\n    var poll = function() {\n        if (!checkRequestCounter()) {\n            // Too many requests, stop polling.\n            return;\n        }\n        ajax.onreadystatechange = function() {\n            if (this.readyState === 4 && this.status === 200) {\n                if (this.status === 200) {\n                    try {\n                        json = JSON.parse(this.responseText);\n                    } catch {\n                        setTimeout(poll, params.timeout);\n                        return;\n                    }\n                    if (!json.success || json.success !== 1) {\n                        // Poll.php returned an error or an exception. Stop trying to poll.\n                        return;\n                    }\n\n                    // Process results - trigger all necessary Javascript/jQuery events.\n                    var events = json.events;\n                    for (var i in events) {\n                        PubSub.publish(RealTimeEvents.EVENT, events[i]);\n                        // Remember the last id.\n                        params.fromid = events[i].id;\n                    }\n                    // And start polling again.\n                    setTimeout(poll, params.timeout);\n                } else {\n                    // Must be a server timeout or loss of network - start new process.\n                    setTimeout(poll, params.timeout);\n                }\n            }\n        };\n        var url = pollURL + '?userid=' + encodeURIComponent(params.userid) + '&token=' +\n            encodeURIComponent(params.token) + '&fromid=' + encodeURIComponent(params.fromid);\n\n        if(channels.length <= 0) {\n            return;\n        }\n\n        var contextstring = \"\";\n        var componentstring = \"\";\n        var areastring = \"\";\n        var itemidstring = \"\";\n        var fromtimestampstring = \"\";\n        var channelstring = \"\";\n\n        for (var i = 0; i < channels.length; i++) {\n            if (i == channels.length - 1) {\n                contextstring += channels[i].context;\n                componentstring += channels[i].component;\n                areastring += channels[i].area;\n                itemidstring += channels[i].itemid;\n                channelstring += channels[i].channel;\n                fromtimestampstring += channels[i].fromtimestamp;\n            } else {\n                contextstring += channels[i].context + '-';\n                componentstring += channels[i].component + '-';\n                areastring += channels[i].area + '-';\n                itemidstring += channels[i].itemid + '-';\n                channelstring += channels[i].channel + '-';\n                fromtimestampstring += channels[i].fromtimestamp + '-';\n            }\n        }\n\n        var channelquery = '&channel=' + contextstring + ':'\n                                        + componentstring + ':'\n                                        + areastring + ':'\n                                        + itemidstring + ':'\n                                        + channelstring + ':'\n                                        + fromtimestampstring;\n\n        url += channelquery;\n\n        ajax.open('GET', url, true);\n        ajax.send();\n    };\n\n    var plugin = {\n        init: function(userId, token, pollURLParam, timeout) {\n            if (params && params.userid) {\n                // Log console dev error.\n            } else {\n                params = {\n                    userid: userId,\n                    token: token,\n                    timeout: timeout,\n                };\n            }\n            pollURL = pollURLParam;\n        },\n        subscribe: function(context, component, area, itemid, channel, fromId, fromTimeStamp) {\n            params.fromid = fromId;\n            var channeltosubto = {\n                                    context: context,\n                                    component: component,\n                                    area: area,\n                                    itemid: itemid,\n                                    channel: channel,\n                                    fromtimestamp: fromTimeStamp,\n                                };\n            channels.push(channeltosubto);\n            // eslint-disable-next-line no-console\n            console.log('Subscribe to', channels);\n            setTimeout(poll, params.timeout);\n        }\n    };\n    return plugin;\n});\n"],"names":["define","PubSub","RealTimeEvents","params","pollURL","json","channels","requestscounter","ajax","XMLHttpRequest","poll","curTime","Date","getTime","push","slice","length","publish","CONNECTION_LOST","onreadystatechange","this","readyState","status","JSON","parse","responseText","setTimeout","timeout","success","events","i","EVENT","fromid","id","url","encodeURIComponent","userid","token","contextstring","componentstring","areastring","itemidstring","fromtimestampstring","channelstring","context","component","area","itemid","channel","fromtimestamp","open","send","init","userId","pollURLParam","subscribe","fromId","fromTimeStamp","channeltosubto","console","log"],"mappings":"AAMAA,yCAAO,CAAC,cAAe,yBAAyB,SAASC,OAAQC,oBAEzDC,OAGAC,QAC6BC,KAH7BC,SAAW,GACXC,gBAAkB,GAElBC,KAAO,IAAIC,eAeXC,KAAO,cAXHC,SADU,IAAIC,MACIC,UACtBN,gBAAgBO,KAAKH,YACrBJ,gBAAkBA,gBAAgBQ,OAAO,KAErBC,QAAU,IAAML,QAAUJ,gBAAgB,GAAK,MAC/DN,OAAOgB,QAAQf,eAAegB,iBACvB,KARW,IAElBP,QAgBJH,KAAKW,mBAAqB,cACE,IAApBC,KAAKC,YAAoC,MAAhBD,KAAKE,UACV,MAAhBF,KAAKE,OAAgB,KAEjBjB,KAAOkB,KAAKC,MAAMJ,KAAKK,cACzB,kBACEC,WAAWhB,KAAMP,OAAOwB,aAGvBtB,KAAKuB,SAA4B,IAAjBvB,KAAKuB,mBAMtBC,OAASxB,KAAKwB,WACb,IAAIC,KAAKD,OACV5B,OAAOgB,QAAQf,eAAe6B,MAAOF,OAAOC,IAE5C3B,OAAO6B,OAASH,OAAOC,GAAGG,GAG9BP,WAAWhB,KAAMP,OAAOwB,cAGxBD,WAAWhB,KAAMP,OAAOwB,cAIhCO,IAAM9B,QAAU,WAAa+B,mBAAmBhC,OAAOiC,QAAU,UACjED,mBAAmBhC,OAAOkC,OAAS,WAAaF,mBAAmBhC,OAAO6B,aAE3E1B,SAASU,QAAU,YAIlBsB,cAAgB,GAChBC,gBAAkB,GAClBC,WAAa,GACbC,aAAe,GACfC,oBAAsB,GACtBC,cAAgB,GAEXb,EAAI,EAAGA,EAAIxB,SAASU,OAAQc,IAC7BA,GAAKxB,SAASU,OAAS,GACvBsB,eAAiBhC,SAASwB,GAAGc,QAC7BL,iBAAmBjC,SAASwB,GAAGe,UAC/BL,YAAclC,SAASwB,GAAGgB,KAC1BL,cAAgBnC,SAASwB,GAAGiB,OAC5BJ,eAAiBrC,SAASwB,GAAGkB,QAC7BN,qBAAuBpC,SAASwB,GAAGmB,gBAEnCX,eAAiBhC,SAASwB,GAAGc,QAAU,IACvCL,iBAAmBjC,SAASwB,GAAGe,UAAY,IAC3CL,YAAclC,SAASwB,GAAGgB,KAAO,IACjCL,cAAgBnC,SAASwB,GAAGiB,OAAS,IACrCJ,eAAiBrC,SAASwB,GAAGkB,QAAU,IACvCN,qBAAuBpC,SAASwB,GAAGmB,cAAgB,KAW3Df,KAPmB,YAAcI,cAAgB,IACfC,gBAAkB,IAClBC,WAAa,IACbC,aAAe,IACfE,cAAgB,IAChBD,oBAIlClC,KAAK0C,KAAK,MAAOhB,KAAK,GACtB1B,KAAK2C,gBAGI,CACTC,KAAM,SAASC,OAAQhB,MAAOiB,aAAc3B,SACpCxB,QAAUA,OAAOiC,SAGjBjC,OAAS,CACLiC,OAAQiB,OACRhB,MAAOA,MACPV,QAASA,UAGjBvB,QAAUkD,cAEdC,UAAW,SAASX,QAASC,UAAWC,KAAMC,OAAQC,QAASQ,OAAQC,eACnEtD,OAAO6B,OAASwB,WACZE,eAAiB,CACGd,QAASA,QACTC,UAAWA,UACXC,KAAMA,KACNC,OAAQA,OACRC,QAASA,QACTC,cAAeQ,eAEvCnD,SAASQ,KAAK4C,gBAEdC,QAAQC,IAAI,eAAgBtD,UAC5BoB,WAAWhB,KAAMP,OAAOwB"}